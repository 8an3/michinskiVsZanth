{
  "UseEffect": {
  "prefix": "szuseEffect",
  "body": [
    "useEffect(() => {",
          "}, []);",
        ],
      "description": "Console info",
},
"Loading Button": {
  "prefix": "szLoadingButton",
    "body": [
      "<ButtonLoading size='sm' type='submit' className='w-auto cursor-pointer ml-auto mt-3 bg-primary hover:bg-transparent'",
      "name='intent' value='submit' isSubmitting={isSubmitting}",
      "loadingText='Creating finance deal...'",
      "onClick={() => toast.success(`Creating finance deal...`)}",
      ">",
      "Next",
      "</ButtonLoading>",
]
},
"Rewinds Remix Route": {
  "prefix": "szRoute",
  "body": [
    "import { Layout } from \"~/components\";",
    "",
    "export default function Route() {",
    "  return (",
    "    <Layout>",
    "      <h1>$1</h1>",
    "    </Layout>",
    "  );",
    "}",
    ""
  ],
  "description": "Remix route to render the component that matches the given route path."
},
"Create New File": {
  "prefix": "szNewFile",
  "body": [
    "import { json, type ActionFunction, type LoaderFunction } from '@remix-run/node';",
    "import { getSession, commitSession } from '~/sessions/auth-session.server';",
    "import { GetUser } from '~/utils/loader.server';",
    "import financeFormSchema from '~/overviewUtils/financeFormSchema';",
    "import { Form, Link, useLoaderData, useLocation, Await, useFetcher, useSubmit, useNavigate } from '@remix-run/react';",
    "",
    "export async function loader({ request, params }: LoaderAction) {",
    "  const session = await getSession(request.headers.get('Cookie'));",
    "  const email = session.get('email')",
    "  const user = await GetUser(email)",
    "  return json({user});",
    "};",
    "",
    "export async function action({ request, params }: ActionFunction) {",
    "  const formPayload = Object.fromEntries(await request.formData())",
    "  const formData = financeFormSchema.parse(formPayload);",
    "  const session = await getSession(request.headers.get('Cookie'));",
    "  const email = session.get('email')",
    "  const user = await GetUser(email)",
    "  return json({user});",
    "};",
    "",
    "export default function NewFile() {",
    "const { user } = useLoaderData()",
    "  ",
    "  return (" ,
    "    <div>",
    "    ",
    "    </div>",
    "  )",
    "}",
"",
],
  "description": "Function called on server side before rendering to provide data to the route."
},
"Rewinds Remix Loader": {
    "prefix": "szLoader",
    "body": [
      "import { json, type ActionFunction, type LoaderFunction } from '@remix-run/node';",
      "import { getSession, commitSession } from '~/sessions/auth-session.server';",
      "import { GetUser } from '~/utils/loader.server';",
      "import financeFormSchema from '~/overviewUtils/financeFormSchema';",
      "",
      "export async function loader({ request, params }: LoaderAction) {",
      "  const session = await getSession(request.headers.get('Cookie'));",
      "  const email = session.get('email')",
      "  const user = await GetUser(email)",
      "  return json({user});",
      "};"
    ],
    "description": "Function called on server side before rendering to provide data to the route."
  },
"Rewinds Remix Loader Session": {
  "prefix": "szLoaderSession",
  "body": [
    "import { commitSession, getSession } from \"~/features\";",
    "import { ${1|json,redirect|} } from \"~/libs\";",
    "",
    "import type { LoaderFunction } from \"@remix-run/node\";",
    "",
    "export const loader: LoaderFunction = async ({ request }) => {",
    "  const session = await getSession(request.headers.get(\"Cookie\"));",
    "",
    "  return $1(\"$2\", {",
    "    headers: {",
    "      \"Set-Cookie\": await commitSession(session),",
    "    },",
    "  });",
    "};",
    ""
  ],
  "description": "Function called on server side before rendering to provide data to the route."
},
"Rewinds Remix Loader Function Params": {
  "prefix": "szparamsLoader",
  "body": [
    "export const loader: LoaderFunction = async ({ request }) => {",
    "  const url = new URL(request.url);",
    "  const $2 = url.searchParams.${1|get,getAll|}(\"$2\")",
    "  $3",
    "  return {$4}",
    "};"
  ],
  "description": "Function called on server side before rendering to provide data to the route."
},
"Rewinds Remix Action Function": {
  "prefix": "szAction",
  "body": [
    "import { json, type ActionFunction, type LoaderFunction } from '@remix-run/node';",
    "import { getSession, commitSession } from '~/sessions/auth-session.server';",
    "import { GetUser } from '~/utils/loader.server';",
    "import financeFormSchema from '~/overviewUtils/financeFormSchema';",
    "",
    "export async function action({ request, params }: ActionFunction) {",
    "  const formPayload = Object.fromEntries(await request.formData())",
    "  const formData = financeFormSchema.parse(formPayload);",
    "  const session = await getSession(request.headers.get('Cookie'));",
    "  const email = session.get('email')",
    "  const user = await GetUser(email)",
    "  return json({user});",
    "};"
  ],
  "description": "Function called on server side to handle data mutation and other actions."
},
"Rewinds Remix Headers": {
  "prefix": "szHeaders",
  "body": [
    "export const headers = ({ loaderHeaders, parentHeaders }) => {",
    "  return {",
    "    \"$1\": $2",
    "  };",
    "};"
  ],
  "description": "Function to define headers by route."
},
"Rewinds Remix Meta": {
  "prefix": "szMeta",
  "description": "Function to define meta tags by route.",
  "body": [
    "import { createMetaData } from \"~/utils\";",
    "",
    "export const meta = createMetaData({",
    "  title: `$1`,",
    "  description: `$2`,",
    "});"
  ]
},
"Rewinds Remix ErrorBoundary": {
  "prefix": "szErrorBoundary",
  "body": [
    "export function ErrorBoundary({ error }: { error: Error }) {",
    "  return (",
    "    <div>",
    "      <h1>Error</h1>",
    "      <p>{error.message}</p>",
    "      <p>The stack trace is:</p>",
    "      <pre>{error.stack}</pre>",
    "    </div>",
    "  );",
    "}"
  ],
  "description": "React component that renders whenever there is an error anywhere on the route, either during rendering or during data loading."
},
"Rewinds Remix Handle": {
  "prefix": "remix-handle",
  "body": ["export const handle = {", "  $1", "};"],
  "description": "handle allows you to create application conventions with the useMatches() hook."
},
"Rewinds Remix SEO Handle": {
  "prefix": "rwSeo",
  "body": [
    "export const handle: SEOHandle = {",
    "  getSitemapEntries: () => {",
    "    return $1;",
    "  },",
    "};",
    ""
  ],
  "description": "SEO handle to be used with sitemap.xml file"
},
"Rewinds Remix Link": {
  "prefix": "remix-a-link",
  "body": ["<RemixLink prefetch=\"${1|none,intent,render|}\" to={`$2`}>$3</RemixLink>"],
  "description": "Remix Link component that renders an anchor tag for navigation."
},
"Rewinds Remix Pending Link": {
  "prefix": "remix-a-link-pending",
  "body": [
    "function PendingLink({ to, children }: { to: string; children: any }) {",
    "  const navigation = useNavigation();",
    "  const path = useResolvedPath(to);",
    "",
    "  const isPending =",
    "    navigation.state === \"loading\" &&",
    "    navigation.location.pathname === path.pathname;",
    "",
    "  return (",
    "    <Link",
    "      data-pending={isPending ? \"true\" : null}",
    "      to={to}",
    "      children={children}",
    "    />",
    "  );",
    "}"
  ],
  "description": "Pending link component."
},
"Rewinds Remix Button Navigation": {
  "prefix": "remix-btn-navigation",
  "body": [
    "function SubmitButton() {",
    "  const navigation = useNavigation();",
    "",
    "  const text =",
    "    navigation.state === \"submitting\"",
    "      ? \"Saving...\"",
    "      : navigation.state === \"loading\"",
    "      ? \"Saved!\"",
    "      : \"Go\";",
    "",
    "  return <button type=\"submit\">{text}</button>;",
    "}"
  ],
  "description": "Navigation submit button."
},
"Rewinds Remix Button Navigation Action": {
  "prefix": "remix-btn-navigation-action",
  "body": [
    "function SubmitButton() {",
    "  const navigation = useNavigation();",
    "",
    "  const loadTexts: any = {",
    "    actionRedirect: \"Data saved, redirecting...\",",
    "    actionReload: \"Data saved, reloading fresh data...\"",
    "  };",
    "",
    "  const text =",
    "    navigation.state === \"submitting\"",
    "      ? \"Saving...\"",
    "      : navigation.state === \"loading\"",
    "      ? loadTexts[navigation.type] || \"Loading...\"",
    "      : \"Go\";",
    "",
    "  return <button type=\"submit\"></button>;",
    "}"
  ],
  "description": "Navigation action submit button."
},
  "Rewinds Console": {
    "prefix": "c",
    "body": ["console.log({ $1 });"],
    "description": "Console log"
  },
  "Rewinds Console Log": {
    "prefix": "cl",
    "body": ["console.log({ $1 });"],
    "description": "Console log"
  },
  "Rewinds Console Info": {
    "prefix": "ci",
    "body": ["console.info({ $1 });"],
    "description": "Console info"
  },
  "Rewinds React Component": {
    "prefix": "szrc",
    "body": ["export const $1 = () => {", "  return <div>$1</div>;", "};", ""],
    "description": "React component"
  },
  "Rewinds React PropTypes": {
    "prefix": "szp",
    "body": [
      "$1.propTypes = {",
      "  $2: PropTypes.node",
      "};",
      "",
      "$1.defaultProps = {",
      "  $2: \"\"",
      "};",
      ""
    ],
    "description": "React component"
  },
}
